
// todo : better names for all of these.
// todo : switch to custom event type ?

use std::path::PathBuf;

use winit::{event::{KeyboardInput, ModifiersState, Ime, MouseScrollDelta, TouchPhase, ElementState, MouseButton, AxisId, Touch}, window::Theme};

use self::mouse_position::MousePosition;

pub(crate) mod mouse_position;


/// Input Event types supported by the application.
/// This is a slightly modified subset of the winit window events.
#[derive(Debug, Clone, PartialEq)]
pub enum InputEvent {
    /// A file has been dropped into the window.
    ///
    /// When the user drops multiple files at once, this event will be emitted for each file
    /// separately.
    DroppedFile(PathBuf),

    /// A file is being hovered over the window.
    ///
    /// When the user hovers multiple files at once, this event will be emitted for each file
    /// separately.
    HoveredFile(PathBuf),

    /// A file was hovered, but has exited the window.
    ///
    /// There will be a single `HoveredFileCancelled` event triggered even if multiple files were
    /// hovered.
    HoveredFileCancelled,

    /// The window received a unicode character.
    ///
    /// See also the [`Ime`](Self::Ime) event for more complex character sequences.
    ReceivedCharacter(char),

    /// The window gained or lost focus.
    ///
    /// The parameter is true if the window has gained focus, and false if it has lost focus.
    Focused(bool),

    /// An event from the keyboard has been received.
    KeyboardInput {
        input: KeyboardInput,
        /// If `true`, the event was generated synthetically by winit
        /// in one of the following circumstances:
        ///
        /// * Synthetic key press events are generated for all keys pressed
        ///   when a window gains focus. Likewise, synthetic key release events
        ///   are generated for all keys pressed when a window goes out of focus.
        ///   ***Currently, this is only functional on X11 and Windows***
        ///
        /// Otherwise, this value is always `false`.
        is_synthetic: bool,
    },

    /// The keyboard modifiers have changed.
    ///
    /// ## Platform-specific
    ///
    /// - **Web:** This API is currently unimplemented on the web. This isn't by design - it's an
    ///   issue, and it should get fixed - but it's the current state of the API.
    ModifiersChanged(ModifiersState),

    /// An event from an input method.
    ///
    /// **Note:** You have to explicitly enable this event using [`Window::set_ime_allowed`].
    ///
    /// ## Platform-specific
    ///
    /// - **iOS / Android / Web / Orbital:** Unsupported.
    Ime(Ime),

    /// The cursor has moved on the window.
    CursorMoved {
        /// (x,y) coords in pixels relative to the top-left corner of the window. Because the range of this data is
        /// limited by the display area and it may have been transformed by the OS to implement effects such as cursor
        /// acceleration, it should not be used to implement non-cursor-like interactions such as 3D camera control.
        position: MousePosition,
    },

    /// A mouse wheel movement or touchpad scroll occurred.
    MouseWheel {
        delta: MouseScrollDelta,
        phase: TouchPhase,
    },

    /// An mouse button press has been received.
    MouseInput {
        state: ElementState,
        button: MouseButton,
    },

    /// Touchpad magnification event with two-finger pinch gesture.
    ///
    /// Positive delta values indicate magnification (zooming in) and
    /// negative delta values indicate shrinking (zooming out).
    ///
    /// ## Platform-specific
    ///
    /// - Only available on **macOS**.
    TouchpadMagnify {
        delta: f64,
        phase: TouchPhase,
    },

    /// Smart magnification event.
    ///
    /// On a Mac, smart magnification is triggered by a double tap with two fingers
    /// on the trackpad and is commonly used to zoom on a certain object
    /// (e.g. a paragraph of a PDF) or (sort of like a toggle) to reset any zoom.
    /// The gesture is also supported in Safari, Pages, etc.
    ///
    /// The event is general enough that its generating gesture is allowed to vary
    /// across platforms. It could also be generated by another device.
    ///
    /// Unfortunatly, neither [Windows](https://support.microsoft.com/en-us/windows/touch-gestures-for-windows-a9d28305-4818-a5df-4e2b-e5590f850741)
    /// nor [Wayland](https://wayland.freedesktop.org/libinput/doc/latest/gestures.html)
    /// support this gesture or any other gesture with the same effect.
    ///
    /// ## Platform-specific
    ///
    /// - Only available on **macOS 10.8** and later.
    SmartMagnify,

    /// Touchpad rotation event with two-finger rotation gesture.
    ///
    /// Positive delta values indicate rotation counterclockwise and
    /// negative delta values indicate rotation clockwise.
    ///
    /// ## Platform-specific
    ///
    /// - Only available on **macOS**.
    TouchpadRotate {
        delta: f32,
        phase: TouchPhase,
    },

    /// Touchpad pressure event.
    ///
    /// At the moment, only supported on Apple forcetouch-capable macbooks.
    /// The parameters are: pressure level (value between 0 and 1 representing how hard the touchpad
    /// is being pressed) and stage (integer representing the click level).
    TouchpadPressure {
        pressure: f32,
        stage: i64,
    },

    /// Motion on some analog axis. May report data redundant to other, more specific events.
    AxisMotion {
        axis: AxisId,
        value: f64,
    },

    /// Touch event has been received
    ///
    /// ## Platform-specific
    ///
    /// - **macOS:** Unsupported.
    Touch(Touch),

    /// The system window theme has changed.
    ///
    /// Applications might wish to react to this to change the theme of the content of the window
    /// when the system changes the window theme.
    ///
    /// ## Platform-specific
    ///
    /// - **iOS / Android / X11 / Wayland / Orbital:** Unsupported.
    ThemeChanged(Theme),

    /// The window has been occluded (completely hidden from view).
    ///
    /// This is different to window visibility as it depends on whether the window is closed,
    /// minimised, set invisible, or fully occluded by another window.
    ///
    /// Platform-specific behavior:
    /// - **iOS / Android / Web / Wayland / Windows / Orbital:** Unsupported.
    Occluded(bool),
}

impl InputEvent {
    pub fn try_from(raw_event: winit::event::WindowEvent) -> Option<InputEvent> {
        match raw_event {
            winit::event::WindowEvent::DroppedFile(path) => Some(InputEvent::DroppedFile(path)),
            winit::event::WindowEvent::HoveredFile(path) => Some(InputEvent::HoveredFile(path)),
            winit::event::WindowEvent::HoveredFileCancelled => Some(InputEvent::HoveredFileCancelled),
            winit::event::WindowEvent::ReceivedCharacter(c) => Some(InputEvent::ReceivedCharacter(c)),
            winit::event::WindowEvent::Focused(focused) => Some(InputEvent::Focused(focused)),
            winit::event::WindowEvent::KeyboardInput { input, is_synthetic, .. } => Some(InputEvent::KeyboardInput { input, is_synthetic }),
            winit::event::WindowEvent::ModifiersChanged(modifiers) => Some(InputEvent::ModifiersChanged(modifiers)),
            winit::event::WindowEvent::Ime(ime) => Some(InputEvent::Ime(ime)),
            winit::event::WindowEvent::CursorMoved { position, .. } => Some(InputEvent::CursorMoved { position: MousePosition::from(position) }),
            winit::event::WindowEvent::CursorLeft { .. } => Some(InputEvent::CursorMoved { position: MousePosition::OutOfWindow }),
            winit::event::WindowEvent::MouseWheel { delta, phase, .. } => Some(InputEvent::MouseWheel { delta, phase }),
            winit::event::WindowEvent::MouseInput { state, button, .. } => Some(InputEvent::MouseInput { state, button }),
            winit::event::WindowEvent::TouchpadMagnify { delta, phase, .. } => Some(InputEvent::TouchpadMagnify { delta, phase }),
            winit::event::WindowEvent::TouchpadRotate { delta, phase, .. } => Some(InputEvent::TouchpadRotate { delta, phase }),
            winit::event::WindowEvent::TouchpadPressure { pressure, stage, .. } => Some(InputEvent::TouchpadPressure { pressure, stage }),
            winit::event::WindowEvent::AxisMotion { axis, value, .. } => Some(InputEvent::AxisMotion { axis, value }),
            winit::event::WindowEvent::Touch(touch) => Some(InputEvent::Touch(touch)),
            winit::event::WindowEvent::ThemeChanged(theme) => Some(InputEvent::ThemeChanged(theme)),
            winit::event::WindowEvent::Occluded(occluded) => Some(InputEvent::Occluded(occluded)),
            _ => None,
        }
    }
}